import { Subject } from 'rxjs';
import { AbstractExchange, AbstractAccount, ExchangeType, AccountEvent } from '@metacodi/abstract-exchange';
import { MarketType, Limit, SymbolType, MarketPrice, OrderBookPrice, KlineIntervalType, MarketKline } from '@metacodi/abstract-exchange';
import { OrderTask } from '@metacodi/abstract-exchange';
import { BinanceApiSpot } from './binance-api-spot';
import { BinanceApiFutures } from './binance-api-futures';
import { BinanceWebsocket } from './binance-websocket';
import { BinanceRateLimiter } from './types/binance.types';
import { BinanceSpotAccountBalance, BinanceSpotSymbolExchangeInfo } from './types/binance-spot.types';
import { BinanceFuturesAccountBalance, BinanceFuturesSymbolExchangeInfo } from './types/binance-futures.types';
import { BinanceWsFuturesAccountUpdate, BinanceWsFuturesOrderUpdate, BinanceWsSpotAccountUpdate, BinanceWsSpotOrderUpdate } from './types/binance-websocket.types';
export declare class BinanceExchange extends AbstractExchange {
    market: MarketType;
    exchange: ExchangeType;
    api: BinanceApiSpot | BinanceApiFutures;
    marketWs: BinanceWebsocket;
    accountsWs: {
        [accounId: string]: BinanceWebsocket;
    };
    partials: {
        [orderId: string]: any;
    };
    constructor(market: MarketType);
    getApiClient(account?: AbstractAccount): BinanceApiSpot | BinanceApiFutures;
    retrieveExchangeInfo(): Promise<void>;
    protected processExchangeSymbols(exchangeSymbols: BinanceSpotSymbolExchangeInfo[] | BinanceFuturesSymbolExchangeInfo[]): void;
    protected processExchangeLimits(rateLimits: BinanceRateLimiter[]): void;
    protected parseBinanceRateLimit(data: BinanceRateLimiter): Limit;
    protected getMarketWebsocket(symbol?: SymbolType): BinanceWebsocket;
    protected createMarketPriceSubject(symbol: SymbolType): Subject<MarketPrice>;
    getMarketPrice(symbol: SymbolType): Promise<MarketPrice>;
    getOrderBookTicker(symbol: SymbolType): Promise<OrderBookPrice>;
    protected createMarketKlineSubject(symbol: SymbolType, interval: KlineIntervalType): Subject<MarketKline>;
    protected getAccountWebsocket(account: AbstractAccount, symbol?: SymbolType): BinanceWebsocket;
    protected createAccountEventsSubject(account: AbstractAccount, symbol?: SymbolType): Subject<AccountEvent>;
    retrieveAcountInfo(account: AbstractAccount): Promise<boolean>;
    protected processInitialBalances(account: AbstractAccount, coins: BinanceSpotAccountBalance[] | BinanceFuturesAccountBalance[]): void;
    protected onAccountUpdate(account: AbstractAccount, balance: BinanceWsSpotAccountUpdate | BinanceWsFuturesAccountUpdate): void;
    protected getOrderTask(task: OrderTask): Promise<void>;
    protected postOrderTask(task: OrderTask): Promise<import("./types/binance-futures.types").BinanceFuturesNewOrderResponseResult> | Promise<import("./types/binance-spot.types").BinanceSpotNewOrder>;
    protected cancelOrderTask(task: OrderTask): Promise<import("./types/binance-futures.types").BinanceFuturesCancelOrder> | Promise<import("./types/binance-spot.types").BinanceSpotCancelOrder>;
    protected onOrderUpdate(account: AbstractAccount, orderUpdate: BinanceWsSpotOrderUpdate | BinanceWsFuturesOrderUpdate): void;
    private acceptedBinanceSymbols;
    private parseBinanceSymbol;
    private binanceSymbol;
    private parseBinanceInterval;
    private binanceInterval;
    private parseBinanceMarket;
    private binanceMarket;
    private parseBinanceSide;
    private binanceSide;
    private binanceSpotOrderType;
    private binanceFuturesOrderType;
    private parseBinanceType;
    private parseBinanceStatus;
    private parseBinanceSymbolExchangeInfo;
    private parseBinanceMiniTicker;
    private parseBinancePriceTicker;
    private parseBinanceOrderBookTicker;
    private parseBinanceKline;
    private parseBinanceBalanceSpot;
    private parseBinanceBalanceFutures;
    private parseBinanceOrder;
    private parseBinanceOrderUpdate;
    fixBase(base: number, symbol: SymbolType): number;
    fixQuote(quote: number, symbol: SymbolType): number;
}
//# sourceMappingURL=binance-exchange.d.ts.map